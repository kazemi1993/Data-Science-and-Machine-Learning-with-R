{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPsah/ndoAnq/q4metP8tNP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":191,"metadata":{"id":"6O321q_vcW2N","executionInfo":{"status":"ok","timestamp":1746690617191,"user_tz":-210,"elapsed":3047,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"outputs":[],"source":["!pip install -q rpy2"]},{"cell_type":"code","source":[],"metadata":{"id":"9UlB8lWC1e1Y","executionInfo":{"status":"ok","timestamp":1746690617191,"user_tz":-210,"elapsed":71,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":191,"outputs":[]},{"cell_type":"code","source":["%load_ext rpy2.ipython"],"metadata":{"id":"jMGlcWoXcbdJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690617191,"user_tz":-210,"elapsed":71,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"59e6903d-d073-4eae-f3ad-1d804620f5f9"},"execution_count":192,"outputs":[{"output_type":"stream","name":"stdout","text":["The rpy2.ipython extension is already loaded. To reload it, use:\n","  %reload_ext rpy2.ipython\n"]}]},{"cell_type":"markdown","source":["# The Data\n","We will use the popular [Boston dataset](https://https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html) from the MASS package, which describes some features for houses in Boston in 1978."],"metadata":{"id":"GBdDq50_1bXr"}},{"cell_type":"code","source":["# CRIM - per capita crime rate by town\n","# ZN - proportion of residential land zoned for lots over 25,000 sq.ft.\n","# INDUS - proportion of non-retail business acres per town.\n","# CHAS - Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n","# NOX - nitric oxides concentration (parts per 10 million)\n","# RM - average number of rooms per dwelling\n","# AGE - proportion of owner-occupied units built prior to 1940\n","# DIS - weighted distances to five Boston employment centres\n","# RAD - index of accessibility to radial highways\n","# TAX - full-value property-tax rate per 10,000 dollars\n","# PTRATIO - pupil-teacher ratio by town\n","# B - 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n","# LSTAT - % lower status of the population\n","# MEDV - Median value of owner-occupied homes in $1000's"],"metadata":{"id":"w4YPsLmv1giu","executionInfo":{"status":"ok","timestamp":1746690617191,"user_tz":-210,"elapsed":59,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":193,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","library(MASS)"],"metadata":{"id":"k2RBoduRcck7","executionInfo":{"status":"ok","timestamp":1746690617191,"user_tz":-210,"elapsed":59,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":194,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","set.seed(101)\n","data <- Boston"],"metadata":{"id":"JN5olXFDcezE","executionInfo":{"status":"ok","timestamp":1746690617191,"user_tz":-210,"elapsed":58,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":195,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","str(data)"],"metadata":{"id":"tfK-GCOpce63","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690617817,"user_tz":-210,"elapsed":683,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"0456c3ea-6eed-420f-b4d6-003b378643c6"},"execution_count":196,"outputs":[{"output_type":"stream","name":"stdout","text":["'data.frame':\t506 obs. of  14 variables:\n"," $ crim   : num  0.00632 0.02731 0.02729 0.03237 0.06905 ...\n"," $ zn     : num  18 0 0 0 0 0 12.5 12.5 12.5 12.5 ...\n"," $ indus  : num  2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.87 7.87 ...\n"," $ chas   : int  0 0 0 0 0 0 0 0 0 0 ...\n"," $ nox    : num  0.538 0.469 0.469 0.458 0.458 0.458 0.524 0.524 0.524 0.524 ...\n"," $ rm     : num  6.58 6.42 7.18 7 7.15 ...\n"," $ age    : num  65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100 85.9 ...\n"," $ dis    : num  4.09 4.97 4.97 6.06 6.06 ...\n"," $ rad    : int  1 2 2 3 3 3 5 5 5 5 ...\n"," $ tax    : num  296 242 242 222 222 222 311 311 311 311 ...\n"," $ ptratio: num  15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15.2 15.2 ...\n"," $ black  : num  397 397 393 395 397 ...\n"," $ lstat  : num  4.98 9.14 4.03 2.94 5.33 ...\n"," $ medv   : num  24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ...\n"]}]},{"cell_type":"code","source":["%%R\n","\n","summary(data)"],"metadata":{"id":"F78CvY1Yce8Q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690617817,"user_tz":-210,"elapsed":49,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"7cadf7ad-b1e7-47cb-d101-aeeabcaca243"},"execution_count":197,"outputs":[{"output_type":"stream","name":"stdout","text":["      crim                zn             indus            chas        \n"," Min.   : 0.00632   Min.   :  0.00   Min.   : 0.46   Min.   :0.00000  \n"," 1st Qu.: 0.08205   1st Qu.:  0.00   1st Qu.: 5.19   1st Qu.:0.00000  \n"," Median : 0.25651   Median :  0.00   Median : 9.69   Median :0.00000  \n"," Mean   : 3.61352   Mean   : 11.36   Mean   :11.14   Mean   :0.06917  \n"," 3rd Qu.: 3.67708   3rd Qu.: 12.50   3rd Qu.:18.10   3rd Qu.:0.00000  \n"," Max.   :88.97620   Max.   :100.00   Max.   :27.74   Max.   :1.00000  \n","      nox               rm             age              dis        \n"," Min.   :0.3850   Min.   :3.561   Min.   :  2.90   Min.   : 1.130  \n"," 1st Qu.:0.4490   1st Qu.:5.886   1st Qu.: 45.02   1st Qu.: 2.100  \n"," Median :0.5380   Median :6.208   Median : 77.50   Median : 3.207  \n"," Mean   :0.5547   Mean   :6.285   Mean   : 68.57   Mean   : 3.795  \n"," 3rd Qu.:0.6240   3rd Qu.:6.623   3rd Qu.: 94.08   3rd Qu.: 5.188  \n"," Max.   :0.8710   Max.   :8.780   Max.   :100.00   Max.   :12.127  \n","      rad              tax           ptratio          black       \n"," Min.   : 1.000   Min.   :187.0   Min.   :12.60   Min.   :  0.32  \n"," 1st Qu.: 4.000   1st Qu.:279.0   1st Qu.:17.40   1st Qu.:375.38  \n"," Median : 5.000   Median :330.0   Median :19.05   Median :391.44  \n"," Mean   : 9.549   Mean   :408.2   Mean   :18.46   Mean   :356.67  \n"," 3rd Qu.:24.000   3rd Qu.:666.0   3rd Qu.:20.20   3rd Qu.:396.23  \n"," Max.   :24.000   Max.   :711.0   Max.   :22.00   Max.   :396.90  \n","     lstat            medv      \n"," Min.   : 1.73   Min.   : 5.00  \n"," 1st Qu.: 6.95   1st Qu.:17.02  \n"," Median :11.36   Median :21.20  \n"," Mean   :12.65   Mean   :22.53  \n"," 3rd Qu.:16.95   3rd Qu.:25.00  \n"," Max.   :37.97   Max.   :50.00  \n"]}]},{"cell_type":"code","source":["%%R\n","\n","head(data)"],"metadata":{"id":"W4rPwjrnce9f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690617817,"user_tz":-210,"elapsed":30,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"4b9be8f3-ceb5-4b94-a962-8ca3ca4b69ae"},"execution_count":198,"outputs":[{"output_type":"stream","name":"stdout","text":["     crim zn indus chas   nox    rm  age    dis rad tax ptratio  black lstat\n","1 0.00632 18  2.31    0 0.538 6.575 65.2 4.0900   1 296    15.3 396.90  4.98\n","2 0.02731  0  7.07    0 0.469 6.421 78.9 4.9671   2 242    17.8 396.90  9.14\n","3 0.02729  0  7.07    0 0.469 7.185 61.1 4.9671   2 242    17.8 392.83  4.03\n","4 0.03237  0  2.18    0 0.458 6.998 45.8 6.0622   3 222    18.7 394.63  2.94\n","5 0.06905  0  2.18    0 0.458 7.147 54.2 6.0622   3 222    18.7 396.90  5.33\n","6 0.02985  0  2.18    0 0.458 6.430 58.7 6.0622   3 222    18.7 394.12  5.21\n","  medv\n","1 24.0\n","2 21.6\n","3 34.7\n","4 33.4\n","5 36.2\n","6 28.7\n"]}]},{"cell_type":"code","source":["%%R\n","\n","any(is.na(data))"],"metadata":{"id":"N4hKRA8Gce-0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690618345,"user_tz":-210,"elapsed":533,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"55337655-cd53-4329-cab9-281769a1c9f1"},"execution_count":199,"outputs":[{"output_type":"stream","name":"stdout","text":["[1] FALSE\n"]}]},{"cell_type":"markdown","source":["# Neural Net Model"],"metadata":{"id":"lnLW3EfI144x"}},{"cell_type":"code","source":["%%R\n","\n","install.packages('neuralnet',repos = 'http://cran.us.r-project.org')\n","library(neuralnet)"],"metadata":{"id":"l6m06ZFwcfAE","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1746690623962,"user_tz":-210,"elapsed":5620,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"5aee4f49-1e89-4deb-adc9-e7c6565abbe9"},"execution_count":200,"outputs":[{"output_type":"display_data","data":{"text/plain":["Installing package into ‘/usr/local/lib/R/site-library’\n","(as ‘lib’ is unspecified)\n","trying URL 'http://cran.us.r-project.org/src/contrib/neuralnet_1.44.2.tar.gz'\n","Content type 'application/x-gzip' length 27211 bytes (26 KB)\n","==================================================\n","downloaded 26 KB\n","\n","\n","The downloaded source packages are in\n","\t‘/tmp/RtmphhOfaN/downloaded_packages’\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["# Training the Model"],"metadata":{"id":"CttWUumV1_OQ"}},{"cell_type":"markdown","source":["As a first step, we are going to address data preprocessing. It is good practice to normalize your data before training a neural network. Depending on your dataset, avoiding normalization may lead to useless results or to a very difficult training process (most of the times the algorithm will not converge before the number of maximum iterations allowed). You can choose different methods to scale the data (z-normalization, min-max scale, etc…). Usually scaling in the intervals [0,1] or [-1,1] tends to give better results."],"metadata":{"id":"Pr3xvvE82Esp"}},{"cell_type":"code","source":["%%R\n","\n","maxs <- apply(data, 2, max)\n","mins <- apply(data, 2, min)"],"metadata":{"id":"uIFGcvgVcfBS","executionInfo":{"status":"ok","timestamp":1746690623963,"user_tz":-210,"elapsed":25,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":201,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","maxs"],"metadata":{"id":"qIGIxXKmcfCh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690624473,"user_tz":-210,"elapsed":535,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"536586f0-510d-493b-9c4d-b60cd46310a0"},"execution_count":202,"outputs":[{"output_type":"stream","name":"stdout","text":["    crim       zn    indus     chas      nox       rm      age      dis \n"," 88.9762 100.0000  27.7400   1.0000   0.8710   8.7800 100.0000  12.1265 \n","     rad      tax  ptratio    black    lstat     medv \n"," 24.0000 711.0000  22.0000 396.9000  37.9700  50.0000 \n"]}]},{"cell_type":"code","source":["%%R\n","\n","mins"],"metadata":{"id":"M8fk1qQacfDq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690624473,"user_tz":-210,"elapsed":37,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"034ee372-7689-4d22-c59d-80be9139e48a"},"execution_count":203,"outputs":[{"output_type":"stream","name":"stdout","text":["     crim        zn     indus      chas       nox        rm       age       dis \n","  0.00632   0.00000   0.46000   0.00000   0.38500   3.56100   2.90000   1.12960 \n","      rad       tax   ptratio     black     lstat      medv \n","  1.00000 187.00000  12.60000   0.32000   1.73000   5.00000 \n"]}]},{"cell_type":"code","source":["%%R\n","\n","scaled <- as.data.frame(scale(data, center = mins, scale = maxs - mins))"],"metadata":{"id":"tycafZj7cfE3","executionInfo":{"status":"ok","timestamp":1746690624473,"user_tz":-210,"elapsed":28,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":204,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","head(scaled)"],"metadata":{"id":"EKpK4U7ZcfGV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690624473,"user_tz":-210,"elapsed":28,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"5f112588-01ee-40a8-8c3e-e4140c141cc0"},"execution_count":205,"outputs":[{"output_type":"stream","name":"stdout","text":["          crim   zn      indus chas       nox        rm       age       dis\n","1 0.0000000000 0.18 0.06781525    0 0.3148148 0.5775053 0.6416066 0.2692031\n","2 0.0002359225 0.00 0.24230205    0 0.1728395 0.5479977 0.7826982 0.3489620\n","3 0.0002356977 0.00 0.24230205    0 0.1728395 0.6943859 0.5993821 0.3489620\n","4 0.0002927957 0.00 0.06304985    0 0.1502058 0.6585553 0.4418126 0.4485446\n","5 0.0007050701 0.00 0.06304985    0 0.1502058 0.6871048 0.5283213 0.4485446\n","6 0.0002644715 0.00 0.06304985    0 0.1502058 0.5497222 0.5746653 0.4485446\n","         rad        tax   ptratio     black      lstat      medv\n","1 0.00000000 0.20801527 0.2872340 1.0000000 0.08967991 0.4222222\n","2 0.04347826 0.10496183 0.5531915 1.0000000 0.20447020 0.3688889\n","3 0.04347826 0.10496183 0.5531915 0.9897373 0.06346578 0.6600000\n","4 0.08695652 0.06679389 0.6489362 0.9942761 0.03338852 0.6311111\n","5 0.08695652 0.06679389 0.6489362 1.0000000 0.09933775 0.6933333\n","6 0.08695652 0.06679389 0.6489362 0.9929901 0.09602649 0.5266667\n"]}]},{"cell_type":"markdown","source":["# Train and Test Sets\n","Now with our standardized data, let's split it:"],"metadata":{"id":"Bp4JPPZ92OaB"}},{"cell_type":"code","source":["%%R\n","\n","install.packages('caTools',repos = 'http://cran.us.r-project.org')\n","library(caTools)\n","split = sample.split(scaled$medv, SplitRatio = 0.70)\n","\n","train = subset(scaled, split == TRUE)\n","test = subset(scaled, split == FALSE)"],"metadata":{"id":"cndoGbJLcfHp","colab":{"base_uri":"https://localhost:8080/","height":191},"executionInfo":{"status":"ok","timestamp":1746690632031,"user_tz":-210,"elapsed":7564,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"0a689e17-30fc-45d2-a96e-7fb6061fe87e"},"execution_count":206,"outputs":[{"output_type":"display_data","data":{"text/plain":["Installing package into ‘/usr/local/lib/R/site-library’\n","(as ‘lib’ is unspecified)\n","trying URL 'http://cran.us.r-project.org/src/contrib/caTools_1.18.3.tar.gz'\n","Content type 'application/x-gzip' length 65825 bytes (64 KB)\n","==================================================\n","downloaded 64 KB\n","\n","\n","The downloaded source packages are in\n","\t‘/tmp/RtmphhOfaN/downloaded_packages’\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["# Training the Model"],"metadata":{"id":"i_rbI5gr2Wap"}},{"cell_type":"code","source":["%%R\n","\n","library(neuralnet)"],"metadata":{"id":"SRTDSJPUcfI8","executionInfo":{"status":"ok","timestamp":1746690632031,"user_tz":-210,"elapsed":38,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":207,"outputs":[]},{"cell_type":"markdown","source":["Formula for Neural Net\n","For some odd reasons, the neuralnet() function won't accept a formula in the form: y~. that we are used to using. Instead you have to call all the columns added together. Here is some convience code to help quickly create that formula:"],"metadata":{"id":"fBr_BD2B2emQ"}},{"cell_type":"code","source":["%%R\n","\n","# Get column names\n","n <- names(train)\n","print(n)"],"metadata":{"id":"8iBmMSnRcfKH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690632032,"user_tz":-210,"elapsed":38,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"fd54fef8-07f0-43a7-a578-a2adbf191e7e"},"execution_count":208,"outputs":[{"output_type":"stream","name":"stdout","text":[" [1] \"crim\"    \"zn\"      \"indus\"   \"chas\"    \"nox\"     \"rm\"      \"age\"    \n"," [8] \"dis\"     \"rad\"     \"tax\"     \"ptratio\" \"black\"   \"lstat\"   \"medv\"   \n"]}]},{"cell_type":"code","source":["%%R\n","\n","# Paste together\n","f <- as.formula(paste(\"medv ~\", paste(n[!n %in% \"medv\"], collapse = \" + \")))\n","print(f)"],"metadata":{"id":"YljYmMshcfLT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690632032,"user_tz":-210,"elapsed":18,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"05609757-26d7-46d8-a401-956371f4d20e"},"execution_count":209,"outputs":[{"output_type":"stream","name":"stdout","text":["medv ~ crim + zn + indus + chas + nox + rm + age + dis + rad + \n","    tax + ptratio + black + lstat\n"]}]},{"cell_type":"code","source":["%%R\n","\n","nn <- neuralnet(f,data=train,hidden=c(5,3),linear.output=TRUE)"],"metadata":{"id":"81yQ7y6CcfMk","executionInfo":{"status":"ok","timestamp":1746690633317,"user_tz":-210,"elapsed":1295,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":210,"outputs":[]},{"cell_type":"markdown","source":["# Neural Net Visualization"],"metadata":{"id":"u1Xmw4ZS3DGA"}},{"cell_type":"code","source":["%%R\n","\n","# plot(nn)"],"metadata":{"id":"8Cnvz015cfNy","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1746690633981,"user_tz":-210,"elapsed":667,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"94925b04-44ea-4ffc-abcd-878ea02af0b9"},"execution_count":211,"outputs":[{"output_type":"display_data","data":{"text/plain":["dev.new(): using pdf(file=\"Rplots3.pdf\")\n"]},"metadata":{}}]},{"cell_type":"markdown","source":["# Predictions using the Model"],"metadata":{"id":"OeZhXs7x3eup"}},{"cell_type":"markdown","source":["Now we can try to predict the values for the test set and calculate the MSE. Remember that the net will output a normalized prediction, so we need to scale it back in order to make a meaningful comparison (or just a simple prediction).\n","\n"],"metadata":{"id":"DLnJDXFi3iFx"}},{"cell_type":"code","source":["%%R\n","\n","# Compute Predictions off Test Set\n","predicted.nn.values <- compute(nn,test[1:13])"],"metadata":{"id":"HVtvdTEjcfQP","executionInfo":{"status":"ok","timestamp":1746690633981,"user_tz":-210,"elapsed":37,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":212,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","# Its a list returned\n","str(predicted.nn.values)"],"metadata":{"id":"CbO0_K82cfRd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690634826,"user_tz":-210,"elapsed":882,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"babed815-f232-4c71-d867-c16bc409e462"},"execution_count":213,"outputs":[{"output_type":"stream","name":"stdout","text":["List of 2\n"," $ neurons   :List of 3\n","  ..$ : num [1:139, 1:14] 1 1 1 1 1 1 1 1 1 1 ...\n","  .. ..- attr(*, \"dimnames\")=List of 2\n","  .. .. ..$ : chr [1:139] \"1\" \"2\" \"8\" \"9\" ...\n","  .. .. ..$ : chr [1:14] \"\" \"crim\" \"zn\" \"indus\" ...\n","  ..$ : num [1:139, 1:6] 1 1 1 1 1 1 1 1 1 1 ...\n","  .. ..- attr(*, \"dimnames\")=List of 2\n","  .. .. ..$ : chr [1:139] \"1\" \"2\" \"8\" \"9\" ...\n","  .. .. ..$ : NULL\n","  ..$ : num [1:139, 1:4] 1 1 1 1 1 1 1 1 1 1 ...\n","  .. ..- attr(*, \"dimnames\")=List of 2\n","  .. .. ..$ : chr [1:139] \"1\" \"2\" \"8\" \"9\" ...\n","  .. .. ..$ : NULL\n"," $ net.result: num [1:139, 1] 0.512 0.411 0.324 0.209 0.334 ...\n","  ..- attr(*, \"dimnames\")=List of 2\n","  .. ..$ : chr [1:139] \"1\" \"2\" \"8\" \"9\" ...\n","  .. ..$ : NULL\n"]}]},{"cell_type":"code","source":["%%R\n","\n","# Convert back to non-scaled predictions\n","true.predictions <- predicted.nn.values$net.result*(max(data$medv)-min(data$medv))+min(data$medv)"],"metadata":{"id":"yp1_aGPtcfSt","executionInfo":{"status":"ok","timestamp":1746690634827,"user_tz":-210,"elapsed":97,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":214,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","# Convert the test data\n","test.r <- (test$medv)*(max(data$medv)-min(data$medv))+min(data$medv)"],"metadata":{"id":"oT0DCmGjcfUA","executionInfo":{"status":"ok","timestamp":1746690634827,"user_tz":-210,"elapsed":95,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":215,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","# Check the Mean Squared Error\n","MSE.nn <- sum((test.r - true.predictions)^2)/nrow(test)"],"metadata":{"id":"-whM2n6-cfVT","executionInfo":{"status":"ok","timestamp":1746690634832,"user_tz":-210,"elapsed":99,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":216,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","MSE.nn"],"metadata":{"id":"vPOXao5ScfWl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690634832,"user_tz":-210,"elapsed":98,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"adbb56bc-a2c6-4274-9841-b200061488c1"},"execution_count":217,"outputs":[{"output_type":"stream","name":"stdout","text":["[1] 15.1656\n"]}]},{"cell_type":"markdown","source":["# Visualize Error"],"metadata":{"id":"-s6D_CxY3wGJ"}},{"cell_type":"code","source":["%%R\n","\n","error.df <- data.frame(test.r,true.predictions)"],"metadata":{"id":"u41VDiDYcfYP","executionInfo":{"status":"ok","timestamp":1746690634832,"user_tz":-210,"elapsed":75,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":218,"outputs":[]},{"cell_type":"code","source":["%%R\n","\n","head(error.df)"],"metadata":{"id":"YrxshFfTcfbq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1746690634832,"user_tz":-210,"elapsed":74,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"7a0b7d57-11f5-4d91-a9df-d09f3acff0e4"},"execution_count":219,"outputs":[{"output_type":"stream","name":"stdout","text":["   test.r true.predictions\n","1    24.0         28.01789\n","2    21.6         23.48092\n","8    27.1         19.56681\n","9    16.5         14.42056\n","11   15.0         20.01032\n","12   18.9         20.28283\n"]}]},{"cell_type":"code","source":["%%R\n","\n","library(ggplot2)\n","ggplot(error.df,aes(x=test.r,y=true.predictions)) + geom_point() + stat_smooth()"],"metadata":{"id":"qEExBqzgcfgD","colab":{"base_uri":"https://localhost:8080/","height":514},"executionInfo":{"status":"ok","timestamp":1746690635431,"user_tz":-210,"elapsed":661,"user":{"displayName":"Star","userId":"16069218276966640711"}},"outputId":"3a0fb3e5-86dd-4bea-ed6a-710b86389af0"},"execution_count":220,"outputs":[{"output_type":"stream","name":"stdout","text":["`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"CWj14Oya35h4","executionInfo":{"status":"ok","timestamp":1746690635431,"user_tz":-210,"elapsed":10,"user":{"displayName":"Star","userId":"16069218276966640711"}}},"execution_count":220,"outputs":[]}]}